!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3);e.KeyboardInput=r.KeyboardInput},function(t,e,n){var r,i;
/**
 * mainloop.js 1.0.3-20170529
 *
 * @author Isaac Sukin (http://www.isaacsukin.com/)
 * @license MIT
 */!function(o){function s(t){if(u=_(s),!(t<h+y)){for(a+=t-h,h=t,I(t,a),t>d+p&&(l=f*v*1e3/(t-d)+(1-f)*l,d=t,v=0),v++,b=0;a>=c;)if(j(c),a-=c,++b>=240){g=!0;break}T(a/c),O(l,g),g=!1}}var u,c=1e3/60,a=0,h=0,l=60,f=.9,p=1e3,d=0,v=0,b=0,y=0,m=!1,w=!1,g=!1,x="object"==typeof window?window:o,_=x.requestAnimationFrame||function(){var t,e,n=Date.now();return function(r){return t=Date.now(),e=Math.max(0,c-(t-n)),n=t+e,setTimeout(function(){r(t+e)},e)}}(),E=x.cancelAnimationFrame||clearTimeout,S=function(){},I=S,j=S,T=S,O=S;o.MainLoop={getSimulationTimestep:function(){return c},setSimulationTimestep:function(t){return c=t,this},getFPS:function(){return l},getMaxAllowedFPS:function(){return 1e3/y},setMaxAllowedFPS:function(t){return void 0===t&&(t=1/0),0===t?this.stop():y=1e3/t,this},resetFrameDelta:function(){var t=a;return a=0,t},setBegin:function(t){return I=t||I,this},setUpdate:function(t){return j=t||j,this},setDraw:function(t){return T=t||T,this},setEnd:function(t){return O=t||O,this},start:function(){return w||(w=!0,u=_(function(t){T(1),m=!0,h=t,d=t,v=0,u=_(s)})),this},stop:function(){return m=!1,w=!1,E(u),this},isRunning:function(){return m}},r=o.MainLoop,void 0===(i="function"==typeof r?r.call(e,n,e,t):r)||(t.exports=i)}(this)},function(t,e,n){t.exports=n(6)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(5),i=n(4);e.KeyboardInput=class{constructor(...t){this.value=!1,this.pressed=[],this.valueChanges=new r.Subject,this.subscription=[],this.keys=t,this.subscription.push(r.fromEvent(document,"keydown").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==i(t)&&-1==this.pressed.indexOf(e)&&this.pressed.push(e);0==e&&0!=this.pressed.length&&(this.value=!0,this.valueChanges.next(this.value))})),this.subscription.push(r.fromEvent(document,"keyup").subscribe(t=>{const e=this.pressed.length;for(let e of this.keys)e==i(t)&&-1!=this.pressed.indexOf(e)&&this.pressed.splice(this.pressed.indexOf(e),1);this.value&&e>0&&0==this.pressed.length&&(this.value=!1,this.valueChanges.next(this.value))}))}dispose(){this.subscription.forEach(t=>t.unsubscribe()),this.value=!1,this.valueChanges.next(!1),this.valueChanges.complete()}}},function(t,e){function n(t){if(t&&"object"==typeof t){var e=t.which||t.keyCode||t.charCode;e&&(t=e)}if("number"==typeof t)return s[t];var n,o=String(t);return(n=r[o.toLowerCase()])?n:(n=i[o.toLowerCase()])||(1===o.length?o.charCodeAt(0):void 0)}n.isEventKey=function(t,e){if(t&&"object"==typeof t){var n=t.which||t.keyCode||t.charCode;if(null==n)return!1;if("string"==typeof e){var o;if(o=r[e.toLowerCase()])return o===n;if(o=i[e.toLowerCase()])return o===n}else if("number"==typeof e)return e===n;return!1}};var r=(e=t.exports=n).code=e.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},i=e.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(o=97;o<123;o++)r[String.fromCharCode(o)]=o-32;for(var o=48;o<58;o++)r[o-48]=o;for(o=1;o<13;o++)r["f"+o]=o+111;for(o=0;o<10;o++)r["numpad "+o]=o+96;var s=e.names=e.title={};for(o in r)s[r[o]]=o;for(var u in i)r[u]=i[u]},function(t,e,n){"use strict";n.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout(function(){throw t},0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},h=Array.isArray||function(t){return t&&"number"==typeof t.length};function l(t){return null!==t&&"object"==typeof t}function f(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}f.prototype=Object.create(Error.prototype);var p=f,d=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var s=0;s<n.length;++s){n[s].remove(this)}if(o(r))try{r.call(this)}catch(t){e=t instanceof p?v(t.errors):[t]}if(h(i)){s=-1;for(var u=i.length;++s<u;){var c=i[s];if(l(c))try{c.unsubscribe()}catch(t){e=e||[],t instanceof p?e=e.concat(v(t.errors)):e.push(t)}}}if(e)throw new p(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function v(t){return t.reduce(function(t,e){return t.concat(e instanceof p?e.errors:e)},[])}var b="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),y=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=a;break;case 1:if(!n){o.destination=a;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new m(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new m(o,n,r,i)}return o}return i(e,t),e.prototype[b]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(d),m=function(t){function e(e,n,r,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var c=u;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==a&&(o((c=Object.create(n)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=r,u._complete=i,u}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);function w(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof y?r:null}return!0}var g="function"==typeof Symbol&&Symbol.observable||"@@observable";function x(){}function _(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return E(t)}function E(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:x}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof y)return t;if(t[b])return t[b]()}return t||e||n?new y(t,e,n):new y(a)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),w(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=I(e))(function(e,r){var i;i=n.subscribe(function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[g]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:E(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=I(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function I(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function j(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}j.prototype=Object.create(Error.prototype);var T=j,O=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(d),k=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(y),C=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[b]=function(){return new k(this)},e.prototype.lift=function(t){var e=new A(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new T;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new T;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new T;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new T;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new T;return this.hasError?(t.error(this.thrownError),d.EMPTY):this.isStopped?(t.complete(),d.EMPTY):(this.observers.push(t),new O(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new A(t,e)},e}(S),A=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):d.EMPTY},e}(C);var N=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new P(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),P=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(y),G=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new d).add(this.source.subscribe(new V(this.getSubject(),this))),t.closed&&(this._connection=null,t=d.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new N(t));var t},e}(S),F=G.prototype,V=(F._subscribe,F._isComplete,F.getSubject,F.connect,F.refCount,function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(k));var M=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new d,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new R(n)),e.add(r.subscribe(t)),e},e}(S),R=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(d),Q=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new T;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(C),D=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(d)),Y=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(D),q=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),L=function(t){function e(n,r){void 0===r&&(r=q.now);var i=t.call(this,n,function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()})||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(q),z=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(L))(Y),H=new S(function(t){return t.complete()});function U(t){return t?function(t){return new S(function(e){return t.schedule(function(){return e.complete()})})}(t):H}function K(t){return t&&"function"==typeof t.schedule}var W,B=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function J(t,e){return new S(function(n){var r=new d,i=0;return r.add(e.schedule(function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()})),r})}function X(t,e){return e?J(t,e):new S(B(t))}function Z(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return K(n)?(t.pop(),J(t,n)):X(t)}function $(t,e){return new S(e?function(n){return e.schedule(tt,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function tt(t){var e=t.error;t.subscriber.error(e)}W||(W={});var et=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Z(this.value);case"E":return $(this.error);case"C":return U()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var nt=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new rt(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(et.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(et.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(et.createComplete()),this.unsubscribe()},e}(y),rt=function(){return function(t,e){this.notification=t,this.destination=e}}(),it=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new ot(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new T;if(this.isStopped||this.hasError?e=d.EMPTY:(this.observers.push(t),e=new O(this,t)),i&&t.add(t=new nt(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||z).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(C),ot=function(){return function(t,e){this.time=t,this.value=e}}(),st=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),d.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),d.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(C),ut=1,ct={};var at=function(t){var e=ut++;return ct[e]=t,Promise.resolve().then(function(){return function(t){var e=ct[t];e&&e()}(e)}),e},ht=function(t){delete ct[t]},lt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=at(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ht(n),e.scheduled=void 0)},e}(D),ft=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(L))(lt),pt=new L(D),dt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(D),vt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(L))(dt),bt=function(t){function e(e,n){void 0===e&&(e=yt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,function(){return r.frame})||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(L),yt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(D);function mt(t){return t}function wt(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}function gt(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}gt.prototype=Object.create(Error.prototype);var xt=gt;function _t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}_t.prototype=Object.create(Error.prototype);var Et=_t;function St(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}St.prototype=Object.create(Error.prototype);var It=St;function jt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Tt(t,e))}}var Tt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ot(t,this.project,this.thisArg))},t}(),Ot=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);function kt(t,e,n){if(e){if(!K(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return kt(t,n).apply(void 0,r).pipe(jt(function(t){return h(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,s={context:o,subject:i,callbackFunc:t,scheduler:n};return new S(function(r){if(n){var u={args:e,subscriber:r,params:s};return n.schedule(Ct,0,u)}if(!i){i=new st;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){w(i)?i.error(t):console.warn(t)}}return i.subscribe(r)})}}function Ct(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new st;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(At,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function At(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Nt(t,e,n){if(e){if(!K(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Nt(t,n).apply(void 0,r).pipe(jt(function(t){return h(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S(function(r){var o=i.context,s=i.subject;if(n)return n.schedule(Pt,0,{params:i,subscriber:r,context:o});if(!s){s=i.subject=new st;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){w(s)?s.error(t):console.warn(t)}}return s.subscribe(r)})}}function Pt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new st;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(Ft,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(Gt,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(Ft,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Gt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Ft(t){var e=t.err;t.subject.error(e)}var Vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(y),Mt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(y);function Rt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Qt=Rt(),Dt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Yt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var qt=function(t){if(t&&"function"==typeof t[g])return r=t,function(t){var e=r[g]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Dt(t))return B(t);if(Yt(t))return n=t,function(t){return n.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,c),t};if(t&&"function"==typeof t[Qt])return e=t,function(t){for(var n=e[Qt]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t};var e,n,r,i=l(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Lt(t,e,n,r,i){if(void 0===i&&(i=new Mt(t,n,r)),!i.closed)return e instanceof S?e.subscribe(i):qt(e)(i)}var zt={};function Ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return K(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&h(t[0])&&(t=t[0]),X(t,r).lift(new Ut(n))}var Ut=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Kt(t,this.resultSelector))},t}(),Kt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push(zt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Lt(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,s=o[n],u=this.toRespond?s===zt?--this.toRespond:this.toRespond:0;o[n]=e,0===u&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Vt);function Wt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[g]}(t))return function(t,e){return new S(function(n){var r=new d;return r.add(e.schedule(function(){var i=t[g]();r.add(i.subscribe({next:function(t){r.add(e.schedule(function(){return n.next(t)}))},error:function(t){r.add(e.schedule(function(){return n.error(t)}))},complete:function(){r.add(e.schedule(function(){return n.complete()}))}}))})),r})}(t,e);if(Yt(t))return function(t,e){return new S(function(n){var r=new d;return r.add(e.schedule(function(){return t.then(function(t){r.add(e.schedule(function(){n.next(t),r.add(e.schedule(function(){return n.complete()}))}))},function(t){r.add(e.schedule(function(){return n.error(t)}))})})),r})}(t,e);if(Dt(t))return J(t,e);if(function(t){return t&&"function"==typeof t[Qt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S(function(n){var r,i=new d;return i.add(function(){r&&"function"==typeof r.return&&r.return()}),i.add(e.schedule(function(){r=t[Qt](),i.add(e.schedule(function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),i})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Bt(t,e){return e?Wt(t,e):t instanceof S?t:new S(qt(t))}var Jt=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new Xt(t,this.project,this.concurrent))},t}(),Xt=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new Mt(this,void 0,void 0);this.destination.add(r),Lt(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Vt);function Zt(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),function t(e,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(i){return i.pipe(t(function(t,r){return Bt(e(t,r)).pipe(jt(function(e,i){return n(t,e,r,i)}))},r))}:("number"==typeof n&&(r=n),function(t){return t.lift(new Jt(e,r))})}(mt,t)}function $t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Zt(1)(Z.apply(void 0,t))}function te(t){return new S(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Bt(n):U()).subscribe(e)})}function ee(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(h(n))return ne(n,null);if(l(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return ne(r.map(function(t){return n[t]}),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return ne(t=1===t.length&&h(t[0])?t[0]:t,null).pipe(jt(function(t){return i.apply(void 0,t)}))}return ne(t,null)}function ne(t,e){return new S(function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var c=Bt(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(s===r&&n.next(e?e.reduce(function(t,e,n){return t[e]=i[n],t},{}):i),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()})}Object.prototype.toString;function re(t,e,n,r){return o(n)&&(r=n,n=void 0),r?re(t,e,n).pipe(jt(function(t){return h(t)?r.apply(void 0,t):r(t)})):new S(function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var h=0,l=e.length;h<l;h++)t(e[h],n,r,i,o)}i.add(s)}(t,e,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,n)})}function ie(t,e,n){return n?ie(t,e).pipe(jt(function(t){return h(t)?n.apply(void 0,t):n(t)})):new S(function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}})}function oe(t,e,n,r,i){var o,s;if(1==arguments.length){var u=t;s=u.initialState,e=u.condition,n=u.iterate,o=u.resultSelector||mt,i=u.scheduler}else void 0===r||K(r)?(s=t,o=mt,i=r):(s=t,o=r);return new S(function(t){var r=s;if(i)return i.schedule(se,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var u=void 0;try{u=e(r)}catch(e){return void t.error(e)}if(!u){t.complete();break}}var c=void 0;try{c=o(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}})}function se(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function ue(t,e,n){return void 0===e&&(e=H),void 0===n&&(n=H),te(function(){return t()?e:n})}function ce(t){return!h(t)&&t-parseFloat(t)+1>=0}function ae(t,e){return void 0===t&&(t=0),void 0===e&&(e=pt),(!ce(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=pt),new S(function(n){return n.add(e.schedule(he,t,{subscriber:n,counter:0,period:t})),n})}function he(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function le(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return K(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:Zt(n)(X(t,r))}var fe=new S(x);function pe(){return fe}function de(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return H;var n=t[0],r=t.slice(1);return 1===t.length&&h(n)?de.apply(void 0,n):new S(function(t){var e=function(){return t.add(de.apply(void 0,r).subscribe(t))};return Bt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function ve(t,e){return new S(e?function(n){var r=Object.keys(t),i=new d;return i.add(e.schedule(be,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function be(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function ye(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function me(t,e){return function(n){return n.lift(new we(t,e))}}var we=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new ge(t,this.predicate,this.thisArg))},t}(),ge=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(y);function xe(t,e,n){return[me(e,n)(new S(qt(t))),me(ye(e,n))(new S(qt(t)))]}function _e(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!h(t[0]))return t[0];t=t[0]}return X(t,void 0).lift(new Ee)}var Ee=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Se(t))},t}(),Se=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Lt(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(Vt);function Ie(t,e,n){return void 0===t&&(t=0),new S(function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(je,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}})}function je(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Te(t,e,n){void 0===t&&(t=0);var r=-1;return ce(e)?r=Number(e)<1?1:Number(e):K(e)&&(n=e),K(n)||(n=pt),new S(function(e){var i=ce(t)?t:+t-n.now();return n.schedule(Oe,i,{index:0,period:r,subscriber:e})})}function Oe(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function ke(t,e){return new S(function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Bt(i):H).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}})}function Ce(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),X(t,void 0).lift(new Ae(n))}var Ae=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Ne(t,this.resultSelector))},t}(),Ne=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;h(t)?e.push(new Ge(t)):"function"==typeof t[Qt]?e.push(new Pe(t[Qt]())):e.push(new Fe(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y),Pe=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),Ge=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[Qt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Fe=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[Qt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Lt(this,this.observable,this,e)},e}(Vt);n.d(e,"Observable",function(){return S}),n.d(e,"ConnectableObservable",function(){return G}),n.d(e,"GroupedObservable",function(){return M}),n.d(e,"observable",function(){return g}),n.d(e,"Subject",function(){return C}),n.d(e,"BehaviorSubject",function(){return Q}),n.d(e,"ReplaySubject",function(){return it}),n.d(e,"AsyncSubject",function(){return st}),n.d(e,"asapScheduler",function(){return ft}),n.d(e,"asyncScheduler",function(){return pt}),n.d(e,"queueScheduler",function(){return z}),n.d(e,"animationFrameScheduler",function(){return vt}),n.d(e,"VirtualTimeScheduler",function(){return bt}),n.d(e,"VirtualAction",function(){return yt}),n.d(e,"Scheduler",function(){return q}),n.d(e,"Subscription",function(){return d}),n.d(e,"Subscriber",function(){return y}),n.d(e,"Notification",function(){return et}),n.d(e,"NotificationKind",function(){return W}),n.d(e,"pipe",function(){return _}),n.d(e,"noop",function(){return x}),n.d(e,"identity",function(){return mt}),n.d(e,"isObservable",function(){return wt}),n.d(e,"ArgumentOutOfRangeError",function(){return xt}),n.d(e,"EmptyError",function(){return Et}),n.d(e,"ObjectUnsubscribedError",function(){return T}),n.d(e,"UnsubscriptionError",function(){return p}),n.d(e,"TimeoutError",function(){return It}),n.d(e,"bindCallback",function(){return kt}),n.d(e,"bindNodeCallback",function(){return Nt}),n.d(e,"combineLatest",function(){return Ht}),n.d(e,"concat",function(){return $t}),n.d(e,"defer",function(){return te}),n.d(e,"empty",function(){return U}),n.d(e,"forkJoin",function(){return ee}),n.d(e,"from",function(){return Bt}),n.d(e,"fromEvent",function(){return re}),n.d(e,"fromEventPattern",function(){return ie}),n.d(e,"generate",function(){return oe}),n.d(e,"iif",function(){return ue}),n.d(e,"interval",function(){return ae}),n.d(e,"merge",function(){return le}),n.d(e,"never",function(){return pe}),n.d(e,"of",function(){return Z}),n.d(e,"onErrorResumeNext",function(){return de}),n.d(e,"pairs",function(){return ve}),n.d(e,"partition",function(){return xe}),n.d(e,"race",function(){return _e}),n.d(e,"range",function(){return Ie}),n.d(e,"throwError",function(){return $}),n.d(e,"timer",function(){return Te}),n.d(e,"using",function(){return ke}),n.d(e,"zip",function(){return Ce}),n.d(e,"scheduled",function(){return Wt}),n.d(e,"EMPTY",function(){return H}),n.d(e,"NEVER",function(){return fe}),n.d(e,"config",function(){return u})},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){s(t,e,n[e])})}return t}function c(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}n.r(e);var a={groupEvents:!1,changeDetection:"manual"},h={id:0,components:{}};function l(t){if("*"===t)return!0;for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];for(var i=0,o=n;i<o.length;i++){var s=o[i];if(t.includes(s))return!0}return!1}function f(t,e){arguments.length>2&&void 0!==arguments[2]&&arguments[2]&&(t.sort(),e.sort());for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function p(t,e){var n,r=[],i=!0,o=!1,s=void 0;try{for(var u,a=e.inputsFrom[Symbol.iterator]();!(i=(u=a.next()).done);i=!0){var h=u.value,l=t.QueryGraph[h];l.acceptsInputs?r.push.apply(r,c(p(t,l))):r.push(h)}}catch(t){o=!0,s=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw s}}return n=r,Array.from(new Set(n).values())}var d=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,t),s(this,"eventQueue",{addEntity:[],removeEntity:[],addComponents:[],updateComponents:[]}),s(this,"addedResolver",!1),s(this,"activeResolvers",[]),s(this,"lastId",0),s(this,"options",void 0),s(this,"entities",{}),s(this,"entitiesToGraphInputTable",{}),s(this,"QueryGraph",{}),s(this,"GraphInputs",[]);var n=u({},a,e);this.options=n}return o(t,[{key:"addEntity",value:function(){var t=this.lastId++;return this.pushEventToQueue("addEntity",u({},h,{id:t})),t}},{key:"resolve",value:function(){for(var t in this.activeResolvers=[],this.addedResolver=!1,this.eventQueue){var e=t;this.handleEvent.apply(this,[e].concat(c(this.eventQueue[e]))),this.eventQueue[e]=[]}return this}},{key:"pushEventToQueue",value:function(t){for(var e,n=this,r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];if((e=this.eventQueue[t]).push.apply(e,i),this.options.groupEvents){if(!this.addedResolver){var s=this.lastId++;this.activeResolvers.push(s),this.addedResolver=!0,Promise.resolve().then(function(){n.activeResolvers.includes(s)&&n.resolve()})}}else this.resolve();return this}},{key:"updateComplexNode",value:function(t,e){var n=this.QueryGraph[e];if(n&&n.acceptsInputs){var r=!0,i=!0,o=!1,s=void 0;try{for(var u,c=n.inputsFrom[Symbol.iterator]();!(i=(u=c.next()).done);i=!0){var a=u.value,h=this.QueryGraph[a];if(h&&!h.snapshot.has(t)){n.snapshot.delete(t),r=!1;break}}}catch(t){o=!0,s=t}finally{try{i||null==c.return||c.return()}finally{if(o)throw s}}r&&n.snapshot.add(t)}return this}},{key:"updateInputNode",value:function(t){for(var e=this,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];var o=this.entitiesToGraphInputTable[t];if(o){var s=new Set;Array.from(o.values()).map(function(t){return e.QueryGraph[t]}).forEach(function(e){var n=!1,i=!0,o=!1,u=void 0;try{for(var c,a=e.filters[Symbol.iterator]();!(i=(c=a.next()).done);i=!0){var h=c.value;if(l.apply(void 0,[h.caresAbout].concat(r))){var f=h.test(t);f!==h.lastValues[t]&&(h.lastValues[t]=f,n=!0)}}}catch(t){o=!0,u=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw u}}if(n){var p=e.snapshot.size;if(e.filters.find(function(e){return!1===e.lastValues[t]})?e.snapshot.delete(t):e.snapshot.add(t),e.snapshot.size!==p){var d=!0,v=!1,b=void 0;try{for(var y,m=e.outputsTo[Symbol.iterator]();!(d=(y=m.next()).done);d=!0){var w=y.value;s.add(w)}}catch(t){v=!0,b=t}finally{try{d||null==m.return||m.return()}finally{if(v)throw b}}}}}),s.size&&s.forEach(function(n){e.updateComplexNode(t,n)})}return this}},{key:"afterAddingComponent",value:function(t){for(var e=this,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];var o=this.entitiesToGraphInputTable[t];if(!o){var s=new Set;this.entitiesToGraphInputTable[t]=s,o=s}return this.GraphInputs.filter(function(t){return!o.has(t)}).map(function(t){return e.QueryGraph[t]}).forEach(function(t){l.apply(void 0,[t.dependencies].concat(r))&&o.add(t.id)}),this.updateInputNode.apply(this,[t].concat(r))}},{key:"handleEvent",value:function(t){for(var e=this,n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];switch(t){case"addEntity":r.forEach(function(t){e.entities[t.id]=t;var n=Object.keys(t.components);n.length&&e.afterAddingComponent.apply(e,[t.id].concat(c(n)))});break;case"addComponents":r.forEach(function(t){e.entities[t.id].components=u({},e.entities[t.id].components,t.components);var n=Object.keys(t.components);n.length&&e.afterAddingComponent.apply(e,[t.id].concat(c(n)))});break;case"updateComponents":r.forEach(function(t){var n=Object.keys(t.components);n.length&&e.updateInputNode.apply(e,[t.id].concat(c(n)))})}return this}},{key:"addComponentTo",value:function(t,e){return this.pushEventToQueue("addComponents",{id:t,components:e}),this}},{key:"addInputNodeToQueryGraph",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e.map(function(t){return t.name}),i=!0,o=!1,s=void 0;try{for(var u,a=this.GraphInputs[Symbol.iterator]();!(i=(u=a.next()).done);i=!0){var h=u.value;if(f(this.QueryGraph[h].filters.map(function(t){return t.name}),r))return h}}catch(t){o=!0,s=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw s}}var l=this.lastId++,p=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e.map(function(t){return t.caresAbout}),i="*";return r.includes("*")||(i=Array.from(new Set(r.reduce(function(t,e){return[].concat(c(t),c(e))})).values())),i}.apply(void 0,e);return this.QueryGraph[l]={id:l,dependencies:p,outputsTo:[],inputsFrom:[],acceptsInputs:!1,snapshot:new Set,filters:e},this.GraphInputs.push(l),l}},{key:"addComplexNode",value:function(){for(var t=this,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];for(var i=p(this,{inputsFrom:n}),o=0,s=Object.values(this.QueryGraph);o<s.length;o++){var u=s[o];if(u.acceptsInputs&&f(i,p(this,{inputsFrom:this.QueryGraph[u.id].inputsFrom}),!0))return u.id}var c=this.lastId++,a={};n.map(function(e){return t.QueryGraph[e]}).forEach(function(t){t.outputsTo.push(c);var e=!0,n=!1,r=void 0;try{for(var i,o=t.snapshot[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var s=i.value;a[s]?a[s]++:a[s]=1}}catch(t){n=!0,r=t}finally{try{e||null==o.return||o.return()}finally{if(n)throw r}}});var h=Object.keys(a).filter(function(t){return a[t]===n.length}).map(function(t){return t});return this.QueryGraph[c]={dependencies:[],id:c,outputsTo:[],inputsFrom:n,acceptsInputs:!0,snapshot:new Set(h),filters:[]},c}},{key:"has",value:function(){for(var t=this,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return this.addInputNodeToQueryGraph.apply(this,c(n.map(function(e){return{name:"has(".concat(e,")"),test:function(n){return!t.entities[n].components[e]},caresAbout:[e],lastValues:{}}}))),this}}]),t}(),v=function(){function t(e,n){r(this,t),s(this,"ecsGraph",void 0),s(this,"node",void 0),this.ecsGraph=e,this.node=n}return o(t,[{key:"snapshot",value:function(){var t=[],e=!0,n=!1,r=void 0;try{for(var i,o=this.node.snapshot.values()[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var s=i.value;t.push(this.ecsGraph.entities[s])}}catch(t){n=!0,r=t}finally{try{e||null==o.return||o.return()}finally{if(n)throw r}}return t}},{key:"each",value:function(t){var e=this;this.snapshot().forEach(function(n){var r=t(n.components);if("manual"===e.ecsGraph.options.changeDetection&&void 0!==r){var i=[];r instanceof Array&&r.length?i=r:"string"==typeof r&&"*"!==r?i=[r]:"*"!==r&&!0!==r||(i=Object.keys(n.components));var o={};i.forEach(function(t){o[t]=!0}),e.ecsGraph.pushEventToQueue("updateComponents",{id:n.id,components:o})}})}}]),t}(),b=function(){function t(e,n){r(this,t),s(this,"ecsGraph",void 0),s(this,"parent",void 0),s(this,"components",void 0),s(this,"snapshot",void 0),this.ecsGraph=e,this.parent=n,this.parent?this.snapshot=this.parent.snapshot:this.snapshot=new Set}return o(t,[{key:"flag",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.pipe.apply(this,[{name:function(t){return"flag(".concat(t,")")},test:function(t,e){return function(n){var r=t.entities[n];return!!r&&!!r.components[e]}}}].concat(e))}},{key:"pipe",value:function(e){for(var n=this,r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];var s=i.map(function(t){return n.ecsGraph.addInputNodeToQueryGraph({name:e.name(t),test:e.test(n.ecsGraph,t),caresAbout:[t],lastValues:{}})});if(this.parent&&!s.includes(this.parent.id)&&s.push(this.parent.id),1===s.length)return new t(this.ecsGraph,this.ecsGraph.QueryGraph[s[0]]);if(s.length>1){var u=this.ecsGraph.addComplexNode(s[0],s[1]),a=new t(this.ecsGraph,this.ecsGraph.QueryGraph[u]);return 2===s.length?a:a.flag.apply(a,c(i.slice(2)))}return this}},{key:"get",value:function(){if(!this.parent)throw new Error("Cannot get component on query node with no parent");return this.components?this.components:(this.components=new v(this.ecsGraph,this.parent),this.components)}}]),t}(),y=function(){function t(e){r(this,t),s(this,"ecsGraph",void 0),s(this,"all",void 0),this.ecsGraph=new d(e),this.all=new b(this.ecsGraph)}return o(t,[{key:"addEntity",value:function(t){var e=this.ecsGraph.addEntity();return this.ecsGraph.addComponentTo(e,t),e}}]),t}(),m=n(0),w=n(1),g=n.n(w);const x=[new m.KeyboardInput("down","s"),new m.KeyboardInput("right","d"),new m.KeyboardInput("up","w","space"),new m.KeyboardInput("left","a")],_=document.getElementById("canvas"),E=_.getContext("2d"),S=[window.innerWidth,window.innerHeight],I=[0,.005],j=.85,T={none:"blue",fall:"black",up:"green",down:"red",wall:"yellow"};_.width=S[0],_.height=S[1];const O=new y({groupEvents:!1,changeDetection:"manual"});g.a.setDraw((()=>{const t=O.all.flag("renderable").get();return()=>{E.clearRect(0,0,1e4,1e4),t.each(t=>(E.fillStyle=t.color,E.fillRect(t.position[0],t.position[1],t.size[0],t.size[1]),!1))}})()).setUpdate((()=>{const t=O.all.flag("rigidbody").get();let e=0;return x[2].valueChanges.subscribe(t=>{t&&e++}),new m.KeyboardInput("q").valueChanges.subscribe(e=>{e&&t.each(t=>(t.renderable=!1,"renderable"))}),n=>{const r=n*j;t.each(t=>(t.speed=t.speed.map((e,n)=>{let i="none";return(t.position[0]<10||t.position[0]+t.size[0]>S[0]-10)&&t.speed[1]>0?i="wall":x[0].value&&t.speed[n]>0?i="down":x[2].value&&t.speed[n]<0?i="up":t.speed[n]>0&&(i="fall"),t.state=i,t.color=T[i],e+I[n]*t.gravityMultiplyer[i]*r}),t.position=t.position.map((n,i)=>{let o=n+r*t.speed[i],s=!1,u=0;if(o<0?(s=!0,u=-1,o=0):o+t.size[i]>S[i]&&(s=!0,u=1,o=S[i]-t.size[i]),t.collisionDirections[i]=u,s===t.collided[i]&&0!==i||(t.collided[i]=s,s&&1===i&&(t.landed=performance.now())),s&&(t.speed[i]=0,1===i&&x[2].value&&s&&1===u&&performance.now()-t.landed>t.jumpOffset&&0!==e&&(t.speed[i]=t.jumpForce,e=0)),1===i&&x[2].value&&"wall"===t.state&&0!==e){let n=-1;t.position[0]>10&&(n=1),t.speed[1]=t.jumpForce/1.3,t.speed[0]=n*t.jumpForce/3,t.hitTheSide=performance.now(),e=0}if(0===i&&performance.now()-t.hitTheSide>t.wallJumpOffest){let e=Number(x[1].value)-Number(x[3].value),n="ground";t.collided[1]||(n="air"),e!==u&&(t.speed[i]=t.sideWaysForce[n]*e),0===e&&"ground"===n&&(t.speed[i]=0)}return o}),["position","speed","landed","collided","color"]))}})()).start();const k={position:[100,100],size:[50,50],color:"blue",renderable:!0,rigidbody:!0,speed:[0,0],jumpForce:-1.5,sideWaysForce:{ground:.75,air:.45},collided:[!1,!1],collisionDirections:[0,0],landed:performance.now(),jumpOffset:200,gravityMultiplyer:{up:.5,fall:1.5,down:3,none:1,wall:.1},wallJumpOffest:500,hitTheSide:performance.now(),state:"none"};O.addEntity(k)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,